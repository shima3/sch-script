;; (import (rnrs (6)))
;; (import (rnrs (6))(srfi :18)(srfi :19)(srfi :69)); (ice-9 threads))
(import (rnrs (6))(srfi :18)(srfi :69)); (ice-9 threads))
;; (import (rnrs (6))(srfi srfi-19)(srfi srfi-69))
;; (use-modules (srfi srfi-19)(srfi srfi-69))
(define make-hash-table make-eqv-hashtable)
(define hash-table-ref/default hashtable-ref)
(define hash-table-set! hashtable-set!)
(define (seconds->duration sec) sec)
#; (define (seconds->duration sec)
  (let ((s (floor sec)))
    (let ((ns (- sec s)))
      (set! s (real->flonum s))
      (set! ns (real->flonum (* ns 1000000000)))
      (make-time 'time-duration ns s)
      )
    )
  )
#; (define (seconds->duration sec)
  (let ((s (floor sec)))
    (let ((ns (- sec s)))
      (set! ns (floor (* ns 1000000000)))
      (make-time 'time-duration ns s)
      )
    )
  )
(define (fork-thread thunk)
  (thread-start! (make-thread thunk)))
(define (add-duration time duration)
  (seconds->time (+ (time->seconds time) duration)))
(define (sleep duration)
  ;; (println "sec=" (time->seconds (current-time)))
  (thread-sleep! (add-duration (current-time) duration)))
(define (time<? time1 time2)
  (< (time->seconds time1)(time->seconds time2)))

(define (current-thread-specific)
  (thread-specific (current-thread))
  )
(define (current-thread-specific-set! value)
  (thread-specific-set! (current-thread) value)
  )

(define (hash-table-ref/key table key)
  (hash-table-ref/default table key key))
