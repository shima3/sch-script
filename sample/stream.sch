(defineCPS debugPrint ^(tag value)
  (lambda (tag value)(display tag)(display value)(newline))
  tag value ^(dummy)( ))

(defineCPS #t ^(x y) x)
(defineCPS #f ^(x y) y)

(defineCPS cons ^(x y f) f x y)
(defineCPS car ^(s) s #t)
(defineCPS cdr ^(s) s #f)
(defineCPS nil #f)
(defineCPS isnil ^(s) s (^(x y d) #f) #t)

(defineCPS + ^(left right) left ^(left) right ^(right)
  (lambda (left right)(+ left right)) left right)

(defineCPS fibonacci ^(a b) a ^(a) b ^(b)
  cons a (fibonacci b (+ a b)))

(defineCPS main ^(args)
  fibonacci 0 1 ^(s)
  debugPrint "s=" s ^()
  car s ^(e)
  debugPrint "e=" e ^()
  cdr s ^(s)
  debugPrint "s=" s ^()
  car s ^(e)
  debugPrint "e=" e ^()
  cdr s ^(s)
  debugPrint "s=" s ^()
  car s ^(e)
  debugPrint "e=" e ^()
  cdr s ^(s)
  debugPrint "s=" s ^()
  car s ^(e)
  debugPrint "e=" e ^()
  cdr s ^(s)
  debugPrint "s=" s)
