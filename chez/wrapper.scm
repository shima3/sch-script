(import (srfi :13 strings))

(define make-hash-table make-eqv-hashtable)
(define (hash-table-ref/key table key)
    (hashtable-ref table key key))
(define hash-table-set! hashtable-set!)

(define make-condition-variable make-condition)
(define (seconds->duration sec)
  (if (flonum? sec)
    (let ((s (floor sec)))
      (let ((ns (- sec s)))
	(set! s (flonum->fixnum s))
	(set! ns (flonum->fixnum (* ns 1000000000)))
	(make-time 'time-duration ns s)
	)
      )
    (make-time 'time-duration 0 sec))
  )
(define mutex-lock! mutex-acquire)
(define mutex-unlock! mutex-release)
(define condition-variable-signal! condition-signal)

(define thread-specific-table (make-hash-table))
(define thread-specific-mutex (make-mutex))
(define (current-thread-specific)
  (let ((value '( )))
    (mutex-lock! thread-specific-mutex)
    (set! value (hashtable-ref thread-specific-table (get-thread-id) '( )))
    (mutex-unlock! thread-specific-mutex)
    value)
  ;; (hash-table-ref/default thread-specific-table (get-thread-id) '( ))
  )
(define (current-thread-specific-set! value)
  (mutex-lock! thread-specific-mutex)
  (hash-table-set! thread-specific-table (get-thread-id) value)
  (mutex-unlock! thread-specific-mutex)
  )

(define (x->string x)
  (if (string? x) x
    (call-with-string-output-port
      (lambda (p) (put-datum p x)))))

(define (make-queue)
  (cons '( ) '( )))
(define (queue-empty? queue)
  (null? (car queue)))
(define (queue-first queue)
  (let ((first (car queue)))
    (if (null? first) '( )
      (car first))))
(define (queue-add! queue el)
  (let ((first (car queue))(last (cdr queue))(new-last (cons el '( ))))
    (if (null? first)
      (set-car! queue new-last)
      (set-cdr! last new-last))
    (set-cdr! queue new-last)
    (null? first) ; 削除予定
    )
  )
(define (queue-remove! queue)
  (let ((first (car queue)))
    (if (null? first)
      '( )
      (begin
	(set-car! queue (cdr first))
	(car first)))
    )
  )

(define-syntax define-type
  (lambda (x)
    (syntax-case x ()
      ((define-type Name . Fields)
	(let
	  ( (exp
	      (list 'define-record-type (syntax->datum #'Name)
		(cons 'fields
		  (map (lambda (field)(list 'mutable field))
		    (syntax->datum #'Fields)))))
	    )
	  ;; (println exp)
	  (datum->syntax #'define-type exp)))
      )))
